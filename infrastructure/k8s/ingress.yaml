apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: find-dining-ingress
  namespace: find-dining
  labels:
    app.kubernetes.io/name: find-dining-ingress
    app.kubernetes.io/instance: find-dining
    app.kubernetes.io/component: ingress
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/healthcheck-path: /health
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '30'
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '5'
    alb.ingress.kubernetes.io/healthy-threshold-count: '2'
    alb.ingress.kubernetes.io/unhealthy-threshold-count: '3'
    alb.ingress.kubernetes.io/load-balancer-name: find-dining-alb
    alb.ingress.kubernetes.io/tags: Environment=production,Project=find-dining
    # SSL/TLS configuration (uncomment when you have SSL certificate)
    # alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:region:account:certificate/cert-id
    # alb.ingress.kubernetes.io/ssl-policy: ELBSecurityPolicy-TLS-1-2-2017-01
    # alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS": 443}]'
    # alb.ingress.kubernetes.io/ssl-redirect: '443'
    
    # CORS configuration
    alb.ingress.kubernetes.io/actions.response-headers: |
      {
        "type": "response-headers",
        "responseHeadersConfig": {
          "customHeaders": {
            "Access-Control-Allow-Origin": "*",
            "Access-Control-Allow-Methods": "GET, POST, PUT, DELETE, OPTIONS",
            "Access-Control-Allow-Headers": "Content-Type, Authorization, X-Requested-With"
          }
        }
      }
    
    # Rate limiting (if using AWS WAF)
    # alb.ingress.kubernetes.io/wafv2-acl-arn: arn:aws:wafv2:region:account:regional/webacl/name/id
spec:
  rules:
    - host: api.find-dining.com  # Replace with your actual domain
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: api-gateway
                port:
                  number: 3000
          - path: /api/users
            pathType: Prefix
            backend:
              service:
                name: user-service
                port:
                  number: 3001
          - path: /api/restaurants
            pathType: Prefix
            backend:
              service:
                name: restaurant-service
                port:
                  number: 3002
          - path: /api/recommendations
            pathType: Prefix
            backend:
              service:
                name: recommendation-engine
                port:
                  number: 3003
          - path: /api/reviews
            pathType: Prefix
            backend:
              service:
                name: review-service
                port:
                  number: 3004
          - path: /api/emotion
            pathType: Prefix
            backend:
              service:
                name: emotion-service
                port:
                  number: 3005
          - path: /api/data
            pathType: Prefix
            backend:
              service:
                name: data-integration-service
                port:
                  number: 3006

---
# Network Policy for ingress traffic
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: find-dining-ingress-policy
  namespace: find-dining
  labels:
    app.kubernetes.io/name: find-dining-network-policy
    app.kubernetes.io/instance: find-dining
    app.kubernetes.io/component: network-policy
spec:
  podSelector: {}
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              name: kube-system
      ports:
        - protocol: TCP
          port: 3000
        - protocol: TCP
          port: 3001
        - protocol: TCP
          port: 3002
        - protocol: TCP
          port: 3003
        - protocol: TCP
          port: 3004
        - protocol: TCP
          port: 3005
        - protocol: TCP
          port: 3006
    - from: []
      ports:
        - protocol: TCP
          port: 3000
  egress:
    - to: []
      ports:
        - protocol: TCP
          port: 53
        - protocol: UDP
          port: 53
        - protocol: TCP
          port: 443
        - protocol: TCP
          port: 80
        - protocol: TCP
          port: 5432  # PostgreSQL
        - protocol: TCP
          port: 6379  # Redis