# This file contains secret templates
# In production, secrets should be managed through AWS Secrets Manager
# and injected using the AWS Secrets Store CSI Driver

apiVersion: v1
kind: Secret
metadata:
  name: find-dining-secrets
  namespace: find-dining
  labels:
    app.kubernetes.io/name: find-dining
    app.kubernetes.io/component: secrets
type: Opaque
stringData:
  # Database credentials (will be populated from AWS Secrets Manager)
  DB_USER: ""
  DB_PASSWORD: ""
  USER_DB_HOST: ""
  RESTAURANT_DB_HOST: ""
  DB_PORT: "5432"
  
  # Redis credentials (will be populated from AWS Secrets Manager)
  REDIS_HOST: ""
  REDIS_PORT: "6379"
  REDIS_AUTH_TOKEN: ""
  REDIS_SESSIONS_HOST: ""
  REDIS_SESSIONS_AUTH_TOKEN: ""
  
  # JWT configuration
  JWT_SECRET: ""
  JWT_EXPIRES_IN: "24h"
  
  # API keys for external services (will be populated from AWS Secrets Manager)
  API_GATEWAY_KEY: ""
  OPENRICE_API_KEY: ""
  TRIPADVISOR_API_KEY: ""
  EATIGO_API_KEY: ""
  CHOPE_API_KEY: ""
  FOODPANDA_API_KEY: ""
  BISTROCHAT_API_KEY: ""
  KEETA_API_KEY: ""
  
  # AWS configuration
  AWS_REGION: "ap-southeast-1"
  AWS_S3_REVIEWS_BUCKET: ""
  AWS_S3_PLATFORM_DATA_BUCKET: ""
  
  # Encryption keys
  ENCRYPTION_KEY: ""
  
  # External service credentials
  SAGEMAKER_ENDPOINT: ""
  BEDROCK_MODEL_ID: ""

---
# Secret for pulling images from private ECR registry
apiVersion: v1
kind: Secret
metadata:
  name: ecr-registry-secret
  namespace: find-dining
  labels:
    app.kubernetes.io/name: find-dining
    app.kubernetes.io/component: registry-secret
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: ""  # This will be populated by the deployment script